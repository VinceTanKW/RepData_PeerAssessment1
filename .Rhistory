scale_colour_discrete(name = "US County", label = c("Los Angeles","Baltimore")) +
ggtitle(expression(atop("Total Emission from Motor Vehicles",
atop("Baltimore City vs Los Angeles County"))))
g + geom_line() + geom_point() +
labs(x = "Year", y = "PM 2.5 in Tons") +
scale_colour_discrete(name = "US County", label = c("Los Angeles","Baltimore")) +
ggtitle(expression(atop("Total Emission from Motor Vehicles",
atop("Baltimore City vs Los Angeles County"))))
dev.copy(png, file="./exdata-data-NEI_data/plot6.png",
height=480, width=480)
dev.off()
ls()
x <- tapply(NEI$Emissions, NEI$year, sum)
barplot(x/1000000, main="United States", ylab="Total emissions (millions of tons)")
head(x)
class(x)
names(x)
NEI <- as.data.table(NEI)
library(data.table)
NEI <- as.data.table(NEI)
setkey(nei, fips, year, type)
setkey(NEI, fips, year, type)
?setkey
pm25 <- NEI[fips == "24510", .(pm25 = sum(Emissions)), by = c("year", "type")]
head(pm25)
p<- qplot(year, pm25,  data=pm25, facets=.~ type, geom=c("point","smooth"), method="lm")
library(ggplot2)
p<- qplot(year, pm25,  data=pm25, facets=.~ type, geom=c("point","smooth"), method="lm")
p
coaldata <- SCC[like(SCC$Short.Name,"[Cc]oal"), SCC]
SCC <- as.data.table(SCC)
coaldata <- SCC[like(SCC$Short.Name,"[Cc]oal"), SCC]
head(SCC)
coaldata <- SCC[like(SCC$Short.Name,"[Cc]oal"), ]
setkey(SCC, Short.Name)
coaldata <- SCC[like(SCC$Short.Name,"[Cc]oal"), SCC]
?like
coaldata <- SCC[like(SCC$Short.Name,"[Cc]oal"), ]
scc <- as.data.table(readRDS("./exdata-data-NEI_data/
Source_Classification_Code.rds"))
scc <- as.data.table(readRDS("./exdata-data-NEI_data/Source_Classification_Code.rds"))
setkey(scc, Short.Name)
coaldata <- scc[like(scc$Short.Name,"[Cc]oal"), SCC]
pm25 <- NEI[SCC %in% coaldata$, .(pm25 = sum(Emissions)), by = c("year")]
pm25 <- NEI[SCC %in% coaldata$scc, .(pm25 = sum(Emissions)), by = c("year")]
pm25 <- NEI[SCC %in% coaldata$, .(pm25 = sum(Emissions)), by = c("year")]
NEI <- as.data.table(readRDS("./exdata-data-NEI_data/summarySCC_PM25.rds"))
setkey(NEI, fips, year, type)
pm25 <- nei[SCC %in% coaldata$, .(pm25 = sum(Emissions)), by = c("year")]
head(pm25)
pm25a <- nei[SCC %in% coaldata$, .(pm25 = sum(Emissions)), by = c("year")]
head(pm25a)
vehicles <- scc[like(scc$Data.Category,"Onroad"), SCC]
head(vehicles)
pm25 <- nei[fips=="24510" & SCC %in% vehicles, .(pm25 = sum(Emissions)), by = c("year")]
pm25 <- NEI[fips=="24510" & SCC %in% vehicles, .(pm25 = sum(Emissions)), by = c("year")]
p <- qplot(year, pm25, data=pm25, geom=c("point", "smooth"), method="lm")
p
g <- ggplot(aggdata1, aes(year, TotalPM2.5))
p <- g + geom_point() + geom_smooth(method="lm") + facet_grid(loc ~ ., scales="free_y")
g <- ggplot(aggdata1, aes(year, TotalPM2.5))
p <- g + geom_point() + geom_smooth(method="lm") + facet_grid(type ~ ., scales="free_y")
p
g <- ggplot(aggdata1, aes(year, TotalPM2.5, type))
p <- g + geom_point() + geom_smooth(method="lm") + facet_grid(type ~ ., scales="free_y")
p
g + geom_point() + geom_smooth(method="lm") + facet_grid(type ~ .)
g + geom_point() + geom_smooth(method="lm")
head(aggdata1)
head(aggdata2)
head(subdata)
head(lmline)
library(plyr)
emissions<-ddply(.data=NEI,"year",summarize,total_emissions=sum(Emissions))
barplot(emissions$total_emissions/1000000,main="Total emissions from PM2.5 in United States from 1999 to 2008",names=emissions$year,xlab="Year",ylab="MM Tons")
ggplot(subdata, aes(x=as.factor(year), y=Emissions,fill=as.factor(year)))+xlab("Year")+ylab("Emission (tons)") +
geom_bar(stat="identity") + scale_fill_hue(l=40) + theme(legend.title=element_blank())+
ggtitle("Motor vehicle emission in Baltimore City")
rm(list=ls())
ls()
rm(list=ls())
if(!file.exists("./data")){dir.create("./data")}
url <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(url,destfile="./data/cameras.csv", method="curl")
download.file(url,destfile="./data/cameras.csv")
cameradata <- read.csv("./data/cameras.csv")
names(cameradata)
tolower(names(cameradata))
toupper(names(cameradata))
strsplit(names(cameradata),"\\.")
strsplit(names(cameradata),".")
strsplit(names(cameradata),"\.")
str(strsplit)
?strsplit
strsplit(names(cameradata),".", fixed=TRUE)
unlist(strsplit(names(cameradata),".", fixed=TRUE))
unlist(strsplit(names(cameradata),"t"))
mylist <- list(letters = c("A","b","c"), numbers = 1:3, matrix(1:25, ncol=5))
head(mylist)
mylist[1]
mylist$letters
mylist[[1]]
mylist[[1]][2]
mylist[[1]][[2]]
splitnames <- strsplit(names(cameradata),"\\.")
splitnames[[6]][1]
firstelement <- function(x){x[1]}
sapply(splitnames, firstelement)
sub("[.]","_",names(cameradata))
sub("S","",names(cameradata))
sub("t","",names(cameradata))
gsub("t","",names(cameradata))
sub("_","","this_is_a_test")
gsub("_","","this_is_a_test")
grep("Alameda", cameradata$intersection)
table(grep("Alameda", cameradata$intersection))
table(grepl("Alameda", cameradata$intersection))
x <- grepl("Alameda", cameradata$intersection)
head(x)
subsetcamera <- cameradata[grep("Alameda",cameradata$intersection), ]
subsetcamera
grep("Alameda", cameradata$intersection, value=TRUE)
grep("Alibaba", cameradata$intersection, value=TRUE)
grep("Alibaba", cameradata$intersection)
length(grep("Alibaba", cameradata$intersection))
nchar(grep("Alameda", cameradata$intersection, value=TRUE))
nchar("how many characters")
substr(grep("Alameda", cameradata$intersection, value=TRUE), 1, 5)
paste("love","you","dear")
paste("love","you","dear",sep="<3")
library(stringr)
paste0("love","you","dear")
str_trim("   wow   ")
str_ltrim("   wow   ")
nchar(grep("Alameda", cameradata$intersection, value=TRUE))
grep("Alameda", cameradata$intersection, value=TRUE)
grep(^The Alameda, cameradata$intersection, value=TRUE)
grep("^ The Alameda", cameradata$intersection, value=TRUE)
library(grDevices)
colors()
colors()
colors()
colors()
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(0.5)
pal(seq(0, 1, len=10))
pal1 <- colorRampPaletter(c("red","yellow"))
pal1 <- colorRampPalette(c("red","yellow"))
pal1(2)
x <- pal1(2)
class(x)
y <- pal(1)
class(y)
pal1(10)
library(RColorBrewer)
cols <- brewer.pal(3, "BuGn")
cols
pal <- colorRampPalette(cols)
image(volcano, col = pal(20))
?Brewer.pal
?brewer.pal
heat.color(volcano)
heat.colors(volcano)
image(volcano, heat.colors())
image(volcano, heat.colors(10))
str(heat.colors)
?heat.colors
image(volcano, heat.colors(2))
image(volcano, col = heat.colors(10)
)
image(volcano, col = heat.colors(20))
image(volcano, col = heat.colors(2))
image(volcano, col = heat.colors(20))
X <- rnorm(10000)
y <- rnorm(10000)
plot(x,y)
y <- rnorm(10)
X <- rnorm(10)
plot(x,y)
?plot
a <- c(1,2,3)
b <- c(4,5,6)
plot(a,b)
a <- c(1.2222,2.444,3.888)
a <- c(1.2222,2.444,3.888)
plot(a,b)
y
x
x <- rnorm(10)
plot(x,y)
x <- rnorm(10000)
y <- rnorm(10000)
plot(x,y)
par(mar=c(rep(1,4)))
plot(x,y)
smoothScatter(x,y)
smoothScatter(x,y, col=heat.colors(10))
smoothScatter(x,y, col=heat.colors(2))
smoothScatter(x,y, col=pal(2))
str(smoothScatter)
smoothScatter(x,y, colramp= pal)
plot(x, y, pch=19)
plot(x, y, pch=19, col=rgb(0,0,0,0.2))
plot(x, y, pch=19, col=rgb(0,0,0,0.1))
plot(x, y, pch=19)
plot(x, y, pch=19, col=rgb(0,0,0,0.1))
plot(x, y, pch=19)
plot(x, y, pch=19, col=rgb(0,0,0,0.2))
plot(x, y, pch=19, col=rgb(0,0,0,0.1))
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count>679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum, prob=0.99)
quantile(pack_sum$unique, probs=0.99)
top_unique <- filter(pack_sum, unique>465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
cran %>%
select(ip_id, country, package, size) %>%
print
submit()
submit()
submit()
submit()
swirl()
library(swirl)
swirl
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
?spread
submit()
extract_numeric("class5")
submit()
submit()
submit()
submit()
submit()
play()
?extract_numeric
submit()
submit()
students4
submit()
submit()
submit()
submit
submit()
passed
failed
passed <- mutate(passed, status="passed")
failed <- mutate(failed, status="failed")
packageVersion("dplyr")
bind_rows(passed, failed)
sat
submit()
submit()
submit()
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label=TRUE)
now()
this_moment <- now()
this_moment
second(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("\\192012")
ymd("//192012")
ymd("1920/1/2")
dt1
ymd_hms("2014-08-23 17:23:02")
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
nyc <- now(tz="America/New_York")
nyc
depart = nyc + days(2)
depart <- nyc + days(2)
depart
depart <- update(depart, hours=17, minutes=34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
with_tz(arrive, tz="Asia/Hong_Kong")
arrive <- with_tz(arrive, tz="Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz="Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
library(swirl)
swirl()
0
bye
bye()
swirl()
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residual)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs - rhs
all.equal(lhs, rhs)
varChild <- var(fit$child)
varChild <- cov(lhs, rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, varRes+varEst)
efit <- lm(accel ~ mag+dist, attenu)
all.equal(mean(efit$residuals),0)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
?pbeta
beta()
beta(1,2)
pbeta(1,2)
plot(beta(1,2))
?beta
qnorm(0.5)
qnorm(0.68)
qnorm(0.86)
qnorm(0.99)
library(swirl)
swirl()
library(swirl)
swirl()
1-((2+1)/36)
deck
1/52
52
4/52
0
12/52
2/51
library(swirl)
swirl()
(0.8*1.6)/2
0.64
mypdf
?integrate
integrate(mypdf, 0, 1.6)
sqrt(.5*4)
library(swirl)
swirl()
.997*.001
(1-.997)*(1-.001)
(1-.98.5)*(1-.001)
(1-.985)*(1-.001)
0.000997/(0.000997+0.014985)
swirl()
library(swirl)
swirl()
0
bye()
swirl()
dice_sqr
ex2_fair(sum(dice_sqr * PDF))
ex2_fair <- sum(dice_sqr * PDF)
ex2_fair <- sum(dice_sqr * dice_fair)
ex2_fair - 3.5^2
sum(dice_sqr * dice_high) - edh^2
library(swirl)
swirl()
10/sqrt(100)
(32-30)/1
((32-30)/10)*sqrt(16)
16-1
qt(.95, 15)
dim(fs)
t.test(fs$sheight-fs$fheight)
11.7885 * sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
0
.035
.144
8
plot(log(1:10))
plot(log(1:1000))
plot(log(-1:1000))
plot(log(1:1000))
log(.4)
data(iris)
head(iris)
table(grep(iris$Species, "setosa"))
str(grep)
table(grep("setosa", iris$Species))
table(grep("setosa", iris$Species, value=FALSE))
grep("test", c("test","testing"))
grep("test", c("test","great", "testing"))
table(grepl("setosa", iris$Species))
dim(iris)
t(iris)
str(spread)
library(dplyr)
?spread
library(ply)
library(plyr)
str(spread)
??spread
library(tidyr)
str(spread)
spread(iris)
spread(iris, species)
spread(iris, Species)
spread(iris, iris$Species)
example(spread)
library(swirl)
swirl()
setwd("./ReproducibleR")
activityfile <- read.csv("./RepData_PeerAssessment1/activity/activity.csv")
head(activityfile)
str(activityfile)
activityfile <- read.csv("c:/Users/Vince/Documents/R/win-library/3.1/ReproducibleR/RepData_PeerAssessment1/activity/activity.csv", StringsAsFactors=FALSE)
?read.csv
activityfile$date <- as.date(activityfile$date)
activityfile$date <- as.Date(activityfile$date)
head(activityfile)
class(activityfile$date)
hist(activityfile$date)
str(hist)
hist(activityfile$steps)
hist(activityfile$date)
activityfile <- read.csv("./RepData_PeerAssessment1/activity/activity.csv")
hist(activityfile$date)
tail(activityfile)
class(activityfile$steps)
str(rowsum)
stepsbyday <- rowsum(activityfile$steps, activityfile$steps)
stepsbyday <- rowsum(activityfile$steps, activityfile$steps, na.rm=TRUE)
stepsbyday <- rowsum(activityfile[which(steps != NA), ]$steps, activityfile[which(steps != NA), ]$steps)
?which
activityfile.narm <- activityfile[which(!is.na(steps)), ]
activityfile.narm <- activityfile[which(!is.na(activityfile$steps)), ]
stepsbyday <- rowsum(activityfile.narm$steps, activityfile.narm$steps)
head(stepsbyday)
hist(stepsbyday)
hist(stepsbyday, breaks=10)
hist(stepsbyday$steps)
stepsbyday <- rowsum(activityfile.narm$steps, activityfile.narm$date)
hist(stepsbyday)
quantile(stepsbyday)
mean(stepsbyday)
median(stepsbyday)
library(plyr)
ddply(articlefile.narm, ~interval, summarise, mean=mean(steps))
ddply(activityfile.narm, ~interval, summarise, mean=mean(steps))
stepsbyinterval <- ddply(activityfile.narm, ~interval, summarise, mean=mean(steps))
plot(steps ~ interval, stepsbyinterval, type="l")
plot(steps ~ interval, data=stepsbyinterval, type="l")
head(stepsbyinterval)
plot(mean ~ interval, data=stepsbyinterval, type="l")
stepsbyinterval[which.max(stepsbyinterval$mean), ]
